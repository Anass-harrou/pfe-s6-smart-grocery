package com.example.smartgrocery.util

import android.content.Context
import android.util.Log
import com.example.smartgrocery.model.Transaction
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONObject
import java.io.File
import java.io.FileWriter
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object ReceiptCsvGenerator {
    private const val TAG = "ReceiptCsvGenerator"

    suspend fun generateCsv(context: Context, transaction: Transaction): File {
        return withContext(Dispatchers.IO) {
            // Determine if this is a purchase transaction
            val isPurchaseTransaction = transaction.source == "achats" ||
                    transaction.title.contains("Purchase", ignoreCase = true)

            // Create file
            val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
            val fileName = "Transaction_${transaction.id}_$timestamp.csv"
            val file = File(context.getExternalFilesDir(null), fileName)

            try {
                FileWriter(file).use { writer ->
                    // Write header
                    writer.append("Smart Grocery Store - Transaction Receipt\n")
                    writer.append("Generated on: ${SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())}\n")
                    writer.append("Generated by: Anass-harrou\n\n")

                    // Write transaction details
                    writer.append("Transaction ID,${transaction.id}\n")
                    writer.append("Date,${transaction.date}\n")
                    writer.append("Type,${transaction.type}\n")
                    writer.append("Title,${transaction.title}\n")
                    writer.append("Description,${transaction.subtitle}\n")
                    writer.append("Amount,${transaction.amount} DH\n\n")

                    // For purchase transactions, fetch and include purchase items
                    if (isPurchaseTransaction) {
                        writer.append("PURCHASE DETAILS\n")
                        writer.append("Product,Quantity,Unit Price,Subtotal\n")

                        try {
                            val purchaseDetails = fetchPurchaseDetails(context, transaction.id)
                            for (item in purchaseDetails) {
                                val productName = item.getString("nom")
                                val quantity = item.getInt("quantite")
                                val price = item.getDouble("prix_unitaire")
                                val subtotal = quantity * price

                                writer.append("${formatCsvField(productName)},")
                                writer.append("$quantity,")
                                writer.append("${String.format(Locale.US, "%.2f", price)} DH,")
                                writer.append("${String.format(Locale.US, "%.2f", subtotal)} DH\n")
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "Error fetching purchase details", e)
                            writer.append("Error retrieving purchase details\n")
                        }
                    }

                    writer.append("\nThank you for shopping with us!\n")
                    writer.append("This receipt is computer generated.\n")
                }

                Log.d(TAG, "CSV saved to: ${file.absolutePath}")
                return@withContext file

            } catch (e: Exception) {
                Log.e(TAG, "Error generating CSV", e)
                throw e
            }
        }
    }

    private suspend fun fetchPurchaseDetails(context: Context, purchaseId: Int): List<JSONObject> {
        return withContext(Dispatchers.IO) {
            try {
                // In a real app, this would make an API call to fetch purchase details
                // For this example, we'll create mock data based on the purchase ID
                val items = mutableListOf<JSONObject>()

                // Here we would normally make an API call to get purchase items
                // For demo purposes, create mock items
                val mockProducts = listOf(
                    Pair("Milk", 12.50),
                    Pair("Bread", 5.00),
                    Pair("Eggs (12)", 18.75),
                    Pair("Cheese", 35.00),
                    Pair("Tomatoes", 8.50),
                    Pair("Rice (1kg)", 14.25),
                    Pair("Chicken", 45.00),
                    Pair("Pasta", 7.00)
                )

                // Generate 2-5 items based on purchase ID
                val itemCount = (purchaseId % 4) + 2
                for (i in 0 until itemCount) {
                    val productIndex = (purchaseId + i) % mockProducts.size
                    val quantity = (purchaseId % 3) + 1

                    val item = JSONObject().apply {
                        put("nom", mockProducts[productIndex].first)
                        put("quantite", quantity)
                        put("prix_unitaire", mockProducts[productIndex].second)
                    }
                    items.add(item)
                }

                return@withContext items
            } catch (e: Exception) {
                Log.e(TAG, "Error fetching purchase details", e)
                return@withContext emptyList()
            }
        }
    }

    // Helper function to properly format CSV fields (escape commas, quotes, etc.)
    private fun formatCsvField(field: String): String {
        return if (field.contains(",") || field.contains("\"") || field.contains("\n")) {
            // Escape quotes by doubling them and wrap the field in quotes
            "\"${field.replace("\"", "\"\"")}\""
        } else {
            field
        }
    }
}